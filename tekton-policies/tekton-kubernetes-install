apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-tekton-install
  namespace: cluster-policies
  annotations:
    apps.open-cluster-management.io/reconcile-option: merge
  generation: 1
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-namespace-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: tekton-pipelines
                  labels:
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
          remediationAction: enforce
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-psp-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: policy/v1beta1
                kind: PodSecurityPolicy
                metadata:
                  name: tekton-pipelines
                  labels:
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
                spec:
                  privileged: false
                  allowPrivilegeEscalation: false
                  volumes:
                    - 'emptyDir'
                    - 'configMap'
                    - 'secret'
                  hostNetwork: false
                  hostIPC: false
                  hostPID: false
                  runAsUser:
                    rule: 'MustRunAsNonRoot'
                  seLinux:
                    rule: 'RunAsAny'
                  supplementalGroups:
                    rule: 'MustRunAs'
                    ranges:
                      - min: 1
                        max: 65535
                  fsGroup:
                    rule: 'MustRunAs'
                    ranges:
                      - min: 1
                        max: 65535
          remediationAction: enforce
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-clusterrole-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRole
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: tekton-pipelines-controller-cluster-access
                  labels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
                rules:
                  - apiGroups: [""]
                    # Namespace access is required because the controller timeout handling logic
                    # iterates over all namespaces and times out any PipelineRuns that have expired.
                    # Pod access is required because the taskrun controller wants to be updated when
                    # a Pod underlying a TaskRun changes state.
                    resources: ["namespaces", "pods"]
                    verbs: ["list", "watch"]
                    # Controller needs cluster access to all of the CRDs that it is responsible for
                    # managing.
                  - apiGroups: ["tekton.dev"]
                    resources: ["tasks", "clustertasks", "taskruns", "pipelines", "pipelineruns", "pipelineresources", "conditions", "runs"]
                    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
                  - apiGroups: ["tekton.dev"]
                    resources: ["taskruns/finalizers", "pipelineruns/finalizers", "runs/finalizers"]
                    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
                  - apiGroups: ["tekton.dev"]
                    resources: ["tasks/status", "clustertasks/status", "taskruns/status", "pipelines/status", "pipelineruns/status", "pipelineresources/status", "runs/status"]
                    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
          remediationAction: enforce
          severity: high          
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-clusterole2-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRole
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  # This is the access that the controller needs on a per-namespace basis.
                  name: tekton-pipelines-controller-tenant-access
                  labels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
                rules:
                  # Read-write access to create Pods, K8s Events and PVCs (for Workspaces)
                  - apiGroups: [""]
                    resources: ["pods", "pods/log", "events", "persistentvolumeclaims"]
                    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
                  # Read-only access to these.
                  - apiGroups: [""]
                    resources: ["configmaps", "limitranges", "secrets", "serviceaccounts"]
                    verbs: ["get", "list", "watch"]
                  # Read-write access to StatefulSets for Affinity Assistant.
                  - apiGroups: ["apps"]
                    resources: ["statefulsets"]
                    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
          remediationAction: enforce
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-clusterole3-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRole
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: tekton-pipelines-webhook-cluster-access
                  labels:
                    app.kubernetes.io/component: webhook
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
                rules:
                  # The webhook needs to be able to list and update customresourcedefinitions,
                  # mainly to update the webhook certificates.
                  - apiGroups: ["apiextensions.k8s.io"]
                    resources: ["customresourcedefinitions", "customresourcedefinitions/status"]
                    verbs: ["get", "list", "update", "patch", "watch"]
                  - apiGroups: ["admissionregistration.k8s.io"]
                    # The webhook performs a reconciliation on these two resources and continuously
                    # updates configuration.
                    resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
                    # knative starts informers on these things, which is why we need get, list and watch.
                    verbs: ["list", "watch"]
                  - apiGroups: ["admissionregistration.k8s.io"]
                    resources: ["mutatingwebhookconfigurations"]
                    # This mutating webhook is responsible for applying defaults to tekton objects
                    # as they are received.
                    resourceNames: ["webhook.pipeline.tekton.dev"]
                    # When there are changes to the configs or secrets, knative updates the mutatingwebhook config
                    # with the updated certificates or the refreshed set of rules.
                    verbs: ["get", "update"]
                  - apiGroups: ["admissionregistration.k8s.io"]
                    resources: ["validatingwebhookconfigurations"]
                    # validation.webhook.pipeline.tekton.dev performs schema validation when you, for example, create TaskRuns.
                    # config.webhook.pipeline.tekton.dev validates the logging configuration against knative's logging structure
                    resourceNames: ["validation.webhook.pipeline.tekton.dev", "config.webhook.pipeline.tekton.dev"]
                    # When there are changes to the configs or secrets, knative updates the validatingwebhook config
                    # with the updated certificates or the refreshed set of rules.
                    verbs: ["get", "update"]
                  - apiGroups: ["policy"]
                    resources: ["podsecuritypolicies"]
                    resourceNames: ["tekton-pipelines"]
                    verbs: ["use"]
          remediationAction: enforce
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-role-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: Role
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: tekton-pipelines-controller
                  namespace: tekton-pipelines
                  labels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
                rules:
                  - apiGroups: [""]
                    resources: ["configmaps"]
                    verbs: ["list", "watch"]
                  # The controller needs access to these configmaps for logging information and runtime configuration.
                  - apiGroups: [""]
                    resources: ["configmaps"]
                    verbs: ["get"]
                    resourceNames: ["config-logging", "config-observability", "config-artifact-bucket", "config-artifact-pvc", "feature-flags", "config-leader-election", "config-registry-cert"]
                  - apiGroups: ["policy"]
                    resources: ["podsecuritypolicies"]
                    resourceNames: ["tekton-pipelines"]
                    verbs: ["use"]
          remediationAction: enforce
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-role2-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: Role
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: tekton-pipelines-webhook
                  namespace: tekton-pipelines
                  labels:
                    app.kubernetes.io/component: webhook
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
                rules:
                  - apiGroups: [""]
                    resources: ["configmaps"]
                    verbs: ["list", "watch"]
                  # The webhook needs access to these configmaps for logging information.
                  - apiGroups: [""]
                    resources: ["configmaps"]
                    verbs: ["get"]
                    resourceNames: ["config-logging", "config-observability", "config-leader-election"]
                  - apiGroups: [""]
                    resources: ["secrets"]
                    verbs: ["list", "watch"]
                  # The webhook daemon makes a reconciliation loop on webhook-certs. Whenever
                  # the secret changes it updates the webhook configurations with the certificates
                  # stored in the secret.
                  - apiGroups: [""]
                    resources: ["secrets"]
                    verbs: ["get", "update"]
                    resourceNames: ["webhook-certs"]
                  - apiGroups: ["policy"]
                    resources: ["podsecuritypolicies"]
                    resourceNames: ["tekton-pipelines"]
                    verbs: ["use"]
          remediationAction: enforce
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-role3-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: Role
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: tekton-pipelines-leader-election
                  namespace: tekton-pipelines
                  labels:
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
                rules:
                  # We uses leases for leaderelection
                  - apiGroups: ["coordination.k8s.io"]
                    resources: ["leases"]
                    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
          remediationAction: enforce
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-sa-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: tekton-pipelines-webhook
                  namespace: tekton-pipelines
                  labels:
                    app.kubernetes.io/component: webhook
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
          remediationAction: enforce
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-tekton-sa-create
        spec:
          namespaceSelector:
            exclude:
              - kube-*
            include:
              - '*'
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: tekton-pipelines-controller-cluster-access
                  labels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: default
                    app.kubernetes.io/part-of: tekton-pipelines
                subjects:
                  - kind: ServiceAccount
                    name: tekton-pipelines-controller
                    namespace: tekton-pipelines
                roleRef:
                  kind: ClusterRole
                  name: tekton-pipelines-controller-cluster-access
                  apiGroup: rbac.authorization.k8s.io
          remediationAction: enforce
          severity: high                
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-cluster-policies
  namespace: cluster-policies
placementRef:
  name: placementrule-tekton-install
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
- name: policy-tekton-install
  kind: Policy
  apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placementrule-tekton-install
  namespace: cluster-policies
spec:
  clusterSelector:
    matchLabels:
      vendor: EKS
